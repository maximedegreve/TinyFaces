import Fluent

struct CreateAvatar: Migration {
    func prepare(on database: Database) -> EventLoopFuture<Void> {
        database.enum("genders")
            .case("agender")
            .case("androgyne")
            .case("androgynous")
            .case("bigender")
            .case("cis")
            .case("cisgender")
            .case("cis_female")
            .case("cis_male")
            .case("cis_man")
            .case("cis_woman")
            .case("cisgender_female")
            .case("cisgender_male")
            .case("cisgender_man")
            .case("cisgender_woman")
            .case("female_to_male")
            .case("female")
            .case("ftm")
            .case("gender_fluid")
            .case("gender_nonconforming")
            .case("gender_questioning")
            .case("gender_variant")
            .case("genderqueer")
            .case("intersex")
            .case("male_to_female")
            .case("male")
            .case("mtf")
            .case("neither")
            .case("neutrois")
            .case("non-binary")
            .case("other")
            .case("pangender")
            .case("trans")
            .case("trans*")
            .case("trans_female")
            .case("trans*_female")
            .case("trans_male")
            .case("trans*_male")
            .case("trans_man")
            .case("trans*_man")
            .case("trans_person")
            .case("trans*_person")
            .case("trans_woman")
            .case("trans*_woman")
            .case("transfeminine")
            .case("transgender")
            .case("transgender_female")
            .case("transgender_male")
            .case("transgender_person")
            .case("transgender_woman")
            .case("transmasculine")
            .case("transsexual")
            .case("transsexual_female")
            .case("transsexual_male")
            .case("transsexual_man")
            .case("transsexual_person")
            .case("transsexual_woman")
            .case("two-spirit")
            .create()
            .flatMap { genderType in
                return database.schema("avatars")
                    .field(.id, .int, .identifier(auto: true), .required)
                    .field("source_id", .int, .required, .references("sources", "id"))
                    .field("url", .string, .required)
                    .field("quality", .int, .required)
                    .field("approved", .bool, .required)
                    .field("gender", genderType, .required)
                    .field("created_at", .datetime)
                    .field("updated_at", .datetime)
                    .field("deleted_at", .datetime)
                    .create()
            }

    }

    func revert(on database: Database) -> EventLoopFuture<Void> {
        return database.schema("genders").delete().flatMap {
            database.enum("avatars").delete()
        }
    }
}
